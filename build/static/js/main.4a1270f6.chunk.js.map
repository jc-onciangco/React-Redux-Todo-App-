{"version":3,"sources":["components/AddTodo.js","components/TodoContent.js","components/TodoEdit.js","components/FinishTodo.js","components/TodoBody.js","components/RadioFilter.js","components/FilterTodos.js","components/DeleteButton.js","components/DeleteCompleteAll.js","components/SideFeatures.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["AddTodo","dispatch","useDispatch","useState","addTodo","setAddTodo","className","onSubmit","e","preventDefault","type","content","placeholder","value","onChange","target","TodoContent","id","todo","useSelector","state","todos","find","style","display","isEditing","textDecoration","isCompleted","onDoubleClick","getFocus","focus","TodoEdit","editValue","setEditValue","isFormSubmitted","setIsFormSubmitted","updatedContent","onMouseOver","onBlur","FinishTodo","checked","TodoBody","filter","todosFilter","map","key","onClick","RadioFilter","filterName","name","for","FilterTodos","DeleteButton","buttonFunction","class","actionType","buttonName","DeleteCompleteAll","SideFeatures","App","Boolean","window","location","hostname","match","initState","rootReducer","newTodos","action","forEach","console","log","Math","random","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a1270f6.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nconst AddTodo = () => {\r\n    const dispatch = useDispatch();\r\n    const [addTodo, setAddTodo] = useState('');\r\n\r\n    return (\r\n        <form   className=\"add-todo\"\r\n                onSubmit={e => {\r\n                    e.preventDefault();\r\n                    dispatch({type: 'ADD_TODO', content: addTodo});\r\n                    setAddTodo('');\r\n                }}>\r\n            <input  type=\"text\"\r\n                    placeholder=\"Put todo here...\"\r\n                    value={addTodo}\r\n                    onChange={e => {setAddTodo(e.target.value)}}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst TodoContent = ({id}) => {\r\n    const todo = useSelector(state => state.todos.find(todo => todo.id === id));\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"content\" style={{display: todo.isEditing? 'none':'flex'}}>\r\n            <p  style={{textDecoration: todo.isCompleted? 'line-through' : 'none'}} \r\n                onDoubleClick={() => {dispatch({type: 'SHOW_EDIT', id: id})}}>{todo.content}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoContent;","import React, {useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst getFocus = (e) => {\r\n    e.target.focus();\r\n}\r\n\r\nconst TodoEdit = ({id}) => {\r\n    const todo = useSelector(state => state.todos.find(todo => todo.id === id));\r\n    const dispatch = useDispatch();\r\n    const [editValue, setEditValue] = useState(todo.content);\r\n    const [isFormSubmitted, setIsFormSubmitted] = useState(false)\r\n\r\n    return (\r\n        <form   className=\"todo-edit\"\r\n                style={{display: todo.isEditing? 'block':'none'}}\r\n                onSubmit={e => {\r\n                    e.preventDefault();\r\n                    setIsFormSubmitted(true);\r\n                    dispatch({type: 'UPDATE_TODO', id: id, updatedContent: editValue});\r\n                }}>\r\n            <input  type=\"text\"\r\n                    value={editValue}\r\n                    onChange={e => {setEditValue(e.target.value)}}\r\n                    onMouseOver={getFocus}\r\n                    onBlur={() => {isFormSubmitted? setIsFormSubmitted(false) : dispatch({type: 'SHOW_EDIT', id: id})}}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoEdit;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst FinishTodo = ({id}) => {\r\n    const todo = useSelector(state => state.todos.find(todo => todo.id === id));\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"finish-todo\">\r\n            <input  type=\"checkbox\"\r\n                    checked={todo.isCompleted? true : false}\r\n                    onChange={() => {dispatch({type: 'COMPLETE', id: id})}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinishTodo;","import React from 'react';\r\nimport TodoContent from './TodoContent';\r\nimport TodoEdit from './TodoEdit';\r\nimport FinishTodo from './FinishTodo';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst TodoBody = () => {\r\n    const filter = useSelector(state => state.todosFilter);\r\n    const todos = useSelector(state => {\r\n        switch(filter) {\r\n            case 'completed':\r\n                return state.todos.filter(todo => todo.isCompleted===true);\r\n            case 'uncompleted':\r\n                return state.todos.filter(todo => todo.isCompleted===false);\r\n            default:\r\n                return state.todos\r\n        }\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"todo-body\">\r\n            <ul className=\"todos\">\r\n                {\r\n                    todos.map(todo => {\r\n                        return (\r\n                            <li className=\"todo\" key={todo.id}>\r\n                                <div>\r\n                                    <FinishTodo id={todo.id}/>\r\n                                </div>\r\n                                <div className=\"todo-content\" >\r\n                                    <TodoContent id={todo.id}/>\r\n                                    <TodoEdit id={todo.id}/>\r\n                                </div>\r\n                                <div    className=\"delete-wrapper\"\r\n                                        onClick={() => {dispatch({type: 'DELETE_TODO', id: todo.id})}}>\r\n                                    <span>DELETE</span>\r\n                                </div>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoBody;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst RadioFilter = ({filterName}) => {\r\n    const filter = useSelector(state => state.todosFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"form-field\">\r\n            <input  type=\"radio\" \r\n                    name=\"todos\"\r\n                    className={`${filterName} radio-button`}\r\n                    id={filterName} \r\n                    value={filterName}\r\n                    checked={filterName===filter? true:false}\r\n                    onChange={() => {dispatch({type: 'CHANGE_FILTER', filter: filterName})}}/>\r\n            <label for={filterName} className=\"radio-label\">\r\n                {filterName}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RadioFilter;","import React from 'react';\r\nimport RadioFilter from './RadioFilter';\r\n\r\nconst FilterTodos = () => {\r\n    return (\r\n        <form className=\"filter-todos\">\r\n            <RadioFilter filterName={'all'}/>\r\n            <RadioFilter filterName={'completed'}/>\r\n            <RadioFilter filterName={'uncompleted'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FilterTodos;","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nconst DeleteButton = ({buttonFunction}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div    className={`${buttonFunction.class} delete-button`}\r\n                onClick={() => {dispatch({type: buttonFunction.actionType})}}>\r\n            {buttonFunction.buttonName}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteButton;\r\n\r\n","import React from 'react';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nconst DeleteCompleteAll = () => {\r\n    return (\r\n        <div className=\"delete-complete-all\">\r\n             <DeleteButton buttonFunction={{buttonName: 'Reset Todos', class: 'reset-todos', actionType: 'RESET_TODOS'}}/>\r\n            <DeleteButton buttonFunction={{buttonName: 'Complete All Unfinished', class: 'finished-all-uncomplete', actionType: 'COMPLETE_ALL_UNFINISHED'}}/>\r\n            <div className=\"delete-all\">\r\n                <DeleteButton buttonFunction={{buttonName: 'Delete Completed', class: 'delete-completed', actionType: 'DELETE_COMPLETED'}}/>\r\n                <DeleteButton buttonFunction={{buttonName: 'Delete All', class: 'delete-all-todo', actionType: 'DELETE_ALL'}}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteCompleteAll;","import React from 'react';\r\nimport FilterTodos from './FilterTodos';\r\nimport DeleteCompleteAll from './DeleteCompleteAll';\r\n\r\n\r\nconst SideFeatures = () => {\r\n    return (\r\n        <div className=\"side-features\">\r\n            <FilterTodos />\r\n            <DeleteCompleteAll />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideFeatures;","import React from 'react';\nimport './App.css';\n\nimport AddTodo from './components/AddTodo';\nimport TodoBody from './components/TodoBody';\nimport SideFeatures from './components/SideFeatures';\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n      <div className=\"todo-app\">\n        <h1 className=\"title\">DUCKS TODO</h1>\n        <AddTodo />\n        <SideFeatures />\n        <TodoBody />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            content: \"Do some funny stuff share to others to make them happy.\",\r\n            isCompleted: false,\r\n            isEditing: false\r\n        },\r\n        {\r\n            id: 1,\r\n            content: \"Cook lunchmeal.\",\r\n            isCompleted: false,\r\n            isEditing: false\r\n        },\r\n        {\r\n            id: 2,\r\n            content: \"Learn new skill and improve it.\",\r\n            isCompleted: false,\r\n            isEditing: false\r\n        }\r\n    ],\r\n    todosFilter: 'all',\r\n}\r\n\r\nconst rootReducer = (state=initState, action={}) => {\r\n    let todos = state.todos;\r\n    let newTodos;\r\n    switch(action.type) {\r\n        case 'SHOW_EDIT':\r\n            todos.forEach(todo => {\r\n                if(todo.id === action.id) {\r\n                    todo.isEditing = !todo.isEditing\r\n                }\r\n            })\r\n            console.log(todos)\r\n            return {\r\n                ...state,\r\n                todos: [...todos]\r\n            }\r\n        case 'UPDATE_TODO':\r\n            todos.forEach(todo => {\r\n                if(todo.id === action.id) {\r\n                    todo.content = action.updatedContent\r\n                    todo.isEditing = !todo.isEditing\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                todos: [...todos]\r\n            }\r\n        case 'ADD_TODO':\r\n            return {\r\n                ...state,\r\n                todos: [\r\n                    ...todos,\r\n                    {\r\n                        id: Math.random(),\r\n                        content: action.content,\r\n                        isEditing: false,\r\n                        isCompleted: false\r\n                    }\r\n                ]\r\n            }\r\n        case 'DELETE_TODO':\r\n            newTodos = todos.filter(todo => todo.id !== action.id);\r\n            return {\r\n                ...state,\r\n                todos: [...newTodos]\r\n            }\r\n        case 'COMPLETE':\r\n            todos.forEach(todo => {\r\n                if(todo.id === action.id) {\r\n                    todo.isCompleted = !todo.isCompleted\r\n                }\r\n            })\r\n            console.log(todos)\r\n            return {\r\n                ...state,\r\n                todos: [...todos]\r\n            }\r\n        case 'CHANGE_FILTER':\r\n            return {\r\n                ...state,\r\n                todosFilter: action.filter\r\n            }\r\n        case 'COMPLETE_ALL_UNFINISHED':\r\n            todos.forEach(todo => {\r\n                if(!todo.isCompleted){\r\n                    todo.isCompleted = !todo.isCompleted;\r\n                    return\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                todos: [...todos]\r\n            }\r\n        case 'DELETE_COMPLETED':\r\n            newTodos = todos.filter(todo => !todo.isCompleted);\r\n            return {\r\n                ...state,\r\n                todos: [...newTodos]\r\n            }\r\n        case 'DELETE_ALL':\r\n            return {\r\n                ...state,\r\n                todos: []\r\n            }\r\n        case 'RESET_TODOS':\r\n            todos.forEach(todo => {\r\n                if(todo.isCompleted){\r\n                    todo.isCompleted = !todo.isCompleted;\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                todos: [...todos]\r\n            }                  \r\n        default:\r\n            return state   \r\n    }\r\n} \r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './store/reducer.js';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store} >\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}